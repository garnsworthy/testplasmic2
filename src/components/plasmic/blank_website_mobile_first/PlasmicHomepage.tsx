// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mCWGd6FJyjTYvKQ5xPcz2W
// Component: i0HPJM8Q3545

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button2 from "../../Button2"; // plasmic-import: vyQvrcvFSZJQ/component

import { useScreenVariants as useScreenVariants_9Qa17TlTfuVv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 9QA17TLTfuVv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_website_mobile_first.module.css"; // plasmic-import: mCWGd6FJyjTYvKQ5xPcz2W/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: i0HPJM8Q3545/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: _zV3y_mm-v7f/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: bQTrUW5siN5n/icon
import LeadingIconLUseHighEmphasisIcon from "./icons/PlasmicIcon__LeadingIconLUseHighEmphasis"; // plasmic-import: E1GbvYBnUfCY/icon
import TrailingIcon1Icon from "./icons/PlasmicIcon__TrailingIcon1"; // plasmic-import: 4DB_uNWwhO-5/icon
import TrailingIcon2Icon from "./icons/PlasmicIcon__TrailingIcon2"; // plasmic-import: pG_IgAXQzpoz/icon
import TrailingIcon3Icon from "./icons/PlasmicIcon__TrailingIcon3"; // plasmic-import: NQVK1bfvjWII/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  h2?: Flex__<"h2">;
  h3?: Flex__<"h3">;
  columns?: Flex__<"div">;
  iPadPro111?: Flex__<"div">;
  muiInput?: Flex__<"div">;
  rectangle?: Flex__<"div">;
  _1TopARegularbRaised?: Flex__<"div">;
  pageTitle?: Flex__<"div">;
  trailingIcons?: Flex__<"div">;
  muiButton?: Flex__<"div">;
};

export interface DefaultHomepageProps {
  className?: string;
}

const $$ = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_9Qa17TlTfuVv()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Welcome to your first page."}
            </h1>
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {"Welcome to your first page."}
            </h2>
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
            >
              {"Welcome to your first page."}
            </h3>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cUxmQ
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template\u2014do this from the list of pages in the top toolbar.\n\nOr press the big blue + button to start inserting items into this page.\n\nIntegrate this project into your codebase\u2014press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
              2, 3, 4
            ]).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jjV1T)}
                  key={currentIndex}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__ouxzg)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yvYw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__erQ9O
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "desktopOnly")
                            ? ""
                            : "This grid of boxes is built using Responsive Columns."}
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__s2Ap
                          )}
                        >
                          <Button2
                            className={classNames(
                              "__wab_instance",
                              sty.button2__astj7
                            )}
                          />

                          <Button2
                            className={classNames(
                              "__wab_instance",
                              sty.button2__ojn7H
                            )}
                          />

                          <Button2
                            className={classNames(
                              "__wab_instance",
                              sty.button2___6YDvn
                            )}
                          />
                        </Stack__>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__pHz9E)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zhvQh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wPhGt
                          )}
                        >
                          {
                            "It's set to show 3 columns per row, and contains 6 columns total."
                          }
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__kZa5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mj1Vm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ecvpv
                          )}
                        >
                          {
                            "Each blue box inside a column is set to stretch height. Stretch height ensures it fills the column vertically, no matter how many lines the other columns contain."
                          }
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__ndJja)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pY88D
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1Sh9J
                          )}
                        >
                          {
                            "On mobile, this changes to one column per row, resulting in a vertical stack."
                          }
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__oDAlH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7AIhs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mz1I
                          )}
                        >
                          {
                            "If instead of a grid, you want a variable number of items to fill up each row, use a horizontal stack with wrapping."
                          }
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__m9Wkn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zPs5J
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xYpbn
                          )}
                        >
                          {"Enjoy!"}
                        </div>
                      </div>
                    </div>
                  </Stack__>
                </Stack__>
              );
            })}
          </section>
          {(
            hasVariant(globalVariants, "screen", "desktopOnly") ? true : false
          ) ? (
            <div
              data-plasmic-name={"iPadPro111"}
              data-plasmic-override={overrides.iPadPro111}
              className={classNames(projectcss.all, sty.iPadPro111)}
            >
              <div
                data-plasmic-name={"muiInput"}
                data-plasmic-override={overrides.muiInput}
                className={classNames(projectcss.all, sty.muiInput)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iGcj
                  )}
                >
                  {"Button"}
                </div>
                <div
                  data-plasmic-name={"rectangle"}
                  data-plasmic-override={overrides.rectangle}
                  className={classNames(projectcss.all, sty.rectangle)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rLuf5
                  )}
                >
                  {"Filled"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"_1TopARegularbRaised"}
                  data-plasmic-override={overrides._1TopARegularbRaised}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty._1TopARegularbRaised
                  )}
                >
                  <LeadingIconLUseHighEmphasisIcon
                    className={classNames(projectcss.all, sty.svg__ff7H1)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"pageTitle"}
                    data-plasmic-override={overrides.pageTitle}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.pageTitle
                    )}
                  >
                    {"Page title"}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"trailingIcons"}
                    data-plasmic-override={overrides.trailingIcons}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.trailingIcons)}
                  >
                    <TrailingIcon1Icon
                      className={classNames(projectcss.all, sty.svg__hKygd)}
                      role={"img"}
                    />

                    <TrailingIcon2Icon
                      className={classNames(projectcss.all, sty.svg__r9Vu7)}
                      role={"img"}
                    />

                    <TrailingIcon3Icon
                      className={classNames(projectcss.all, sty.svg__ya4P6)}
                      role={"img"}
                    />
                  </Stack__>
                </Stack__>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"muiButton"}
                data-plasmic-override={overrides.muiButton}
                hasGap={true}
                className={classNames(projectcss.all, sty.muiButton)}
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "h1",
    "h2",
    "h3",
    "columns",
    "iPadPro111",
    "muiInput",
    "rectangle",
    "_1TopARegularbRaised",
    "pageTitle",
    "trailingIcons",
    "muiButton"
  ],
  section: ["section", "h1", "h2", "h3", "columns"],
  h1: ["h1"],
  h2: ["h2"],
  h3: ["h3"],
  columns: ["columns"],
  iPadPro111: [
    "iPadPro111",
    "muiInput",
    "rectangle",
    "_1TopARegularbRaised",
    "pageTitle",
    "trailingIcons",
    "muiButton"
  ],
  muiInput: [
    "muiInput",
    "rectangle",
    "_1TopARegularbRaised",
    "pageTitle",
    "trailingIcons"
  ],
  rectangle: ["rectangle"],
  _1TopARegularbRaised: ["_1TopARegularbRaised", "pageTitle", "trailingIcons"],
  pageTitle: ["pageTitle"],
  trailingIcons: ["trailingIcons"],
  muiButton: ["muiButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h1: "h1";
  h2: "h2";
  h3: "h3";
  columns: "div";
  iPadPro111: "div";
  muiInput: "div";
  rectangle: "div";
  _1TopARegularbRaised: "div";
  pageTitle: "div";
  trailingIcons: "div";
  muiButton: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    h2: makeNodeComponent("h2"),
    h3: makeNodeComponent("h3"),
    columns: makeNodeComponent("columns"),
    iPadPro111: makeNodeComponent("iPadPro111"),
    muiInput: makeNodeComponent("muiInput"),
    rectangle: makeNodeComponent("rectangle"),
    _1TopARegularbRaised: makeNodeComponent("_1TopARegularbRaised"),
    pageTitle: makeNodeComponent("pageTitle"),
    trailingIcons: makeNodeComponent("trailingIcons"),
    muiButton: makeNodeComponent("muiButton"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
